// Code generated by github.com/sylvan/auro/toolkits/cmd/gen-proto. DO NOT EDIT.
syntax = "proto3";

package echo.v1;

import "common/v1/types.proto";
import "echo/v1/greeting.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/protobuf/field_mask.proto";
// import "protoc-gen-swagger/options/annotations.proto";


option go_package = "github.com/sylvan/auro/apis/echo/v1;echov1";

// option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
//  info: {
//     title: "Greeting Service"
//     version: "1.0"
//     contact: {
//       name: "Greeting Service"
//       url: "http://github.com/sylvan/auro/apis"
//     }
//   }
//   host: "github.com/sylvan/auro/apis"
//   base_path: "/echo/v1/greeting"
//   schemes: HTTP
//   schemes: HTTPS
//   consumes: "application/json"
//   produces: "application/json"
//   external_docs: {
//     description: "API specification in Markdown",
//     url: "http://github.com/sylvan/auro/apis/echo/v1/greeting"
//   }
// };

// The service that handles the CRUD of Greeting.
service GreetingService {
  option (google.api.default_host) = "github.com/sylvan/auro/apis";
  // Creates a Greeting.
  rpc CreateGreeting(CreateGreetingRequest) returns (CreateGreetingResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=echos}/greetings"
      body: "greeting"
    };
    option (google.api.method_signature) = "parent,greeting";
  }

  // Gets a Greeting.
  rpc GetGreeting(GetGreetingRequest) returns (GetGreetingResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=echos}/greetings/{id=*}"
    };
    option (google.api.method_signature) = "parent,id";
  }

  // Updates a Greeting.
  rpc UpdateGreeting(UpdateGreetingRequest) returns (UpdateGreetingResponse) {
    option (google.api.http) = {
      patch: "/v1/{parent=echos}/greetings/{greeting.id=*}"
      body: "greeting"
    };
    option (google.api.method_signature) = "parent,greeting,update_mask";
  }

  // Lists Greetings in a Location.
  rpc ListGreetings(ListGreetingsRequest) returns (ListGreetingsResponse) {
    option (google.api.http) = {
      // use post for list request body, add /resources in the end of path to diff from create Greeting rpc.
      post: "/v1/{parent=echos}/greetings/resources"
      body: "*"
    };
  }

  // Deletes a Greeting.
  rpc DeleteGreeting(DeleteGreetingRequest) returns (DeleteGreetingResponse) {
    option (google.api.http) = {
      delete: "/v1/{parent=echos}/greetings/{id=*}"
    };
    option (google.api.method_signature) = "parent,id";
  }

  // Batch delete Greeting by filter.
  rpc DeleteGreetings(DeleteGreetingsRequest) returns (DeleteGreetingsResponse) {
    option (google.api.http) = {
      patch: "/v1/{parent=echos}/greetings"
      body: "*"
    };
  }

  // Imports a Greeting.
  rpc ImportGreeting(ImportGreetingRequest) returns (ImportGreetingResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=echos}/greetings:import"
      body: "import_config"
    };
    option (google.api.method_signature) = "parent,import_config";
  }

  // Exports a Greeting.
  rpc ExportGreeting(ExportGreetingRequest) returns (ExportGreetingResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=echos}/greetings:export"
      body: "export_config"
    };
    option (google.api.method_signature) = "parent,export_config";
  }
}

// Request message for [GreetingService.CreateGreeting][v1.GreetingService.CreateGreeting].
message CreateGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // Required. The Greeting to create.
  Greeting greeting = 2;
}

// Response message for [GreetingService.CreateGreeting][v1.GreetingService.CreateGreeting].
message CreateGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.GetGreeting][v1.GreetingService.GetGreeting].
message GetGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // Required. The id of the Greeting in database.
  int64 id = 2;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 3;
}

// Response message for [GreetingService.GetGreeting][v1.GreetingService.GetGreeting].
message GetGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.UpdateGreeting][v1.GreetingService.UpdateGreeting].
message UpdateGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // Required. The Greeting which replaces the resource on the server.
  Greeting greeting = 2;

  // Required. The update mask applies to the resource.
  // For the `FieldMask` definition, see [google.protobuf.FieldMask][google.protobuf.FieldMask].
  // Updatable fields:
  //
  //   * `id`
  //   * `update_at`
  //   * `create_at`
  google.protobuf.FieldMask update_mask = 3;
}

// Response message for [GreetingService.UpdateGreeting][v1.GreetingService.UpdateGreeting].
message UpdateGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.ListGreetings][v1.GreetingService.ListGreetings].
message ListGreetingsRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // common list option.
  common.v1.CommonOption common_option = 2;

  // common list filter.
  common.v1.CommonFilter common_filter = 3;

  // Mask specifying which fields to read.
  google.protobuf.FieldMask read_mask = 4;

  // option filter struct for list Greeting.
  GreetingOptionFilter option_filter = 5;
}

// Response message for [GreetingService.ListGreetings][v1.GreetingService.ListGreetings].
message ListGreetingsResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  message Details {
    // A list of Greetings that matches the specified filter in the request.
    repeated Greeting items = 1;
    // next request.
    ListGreetingsRequest next_request = 2;
    // total items count of this filter.
    int32 total_count = 3;
  }
  Details details = 3;
}

// Request message for [GreetingService.DeleteGreeting][v1.GreetingService.DeleteGreeting].
message DeleteGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // Required. The resource name of the Greeting to delete.
  // Format:
  // `echos/greetings/{id}`
  int64 id = 2;
}

// Response message for [GreetingService.DeleteGreeting][v1.GreetingService.DeleteGreeting].
message DeleteGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // response data.
  Greeting details = 3;
}

// Request message for [GreetingService.DeleteGreetings][v1.GreetingService.DeleteGreetings].
message DeleteGreetingsRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // use common filter to delete Greeting
  common.v1.CommonFilter common_filter = 2;

  // option filter struct for delete Greeting items.
  GreetingOptionFilter option_filter = 3;
}

// Response message for [GreetingService.DeleteGreetings][v1.GreetingService.DeleteGreetings].
message DeleteGreetingsResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // deleted id list.
  repeated int64 details = 3;
}
// Request message for [GreetingService.ImportGreeting][v1.GreetingService.ImportGreeting].
message ImportGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // Required. The desired input configs. The contents of all input configs will be
  // imported in one batch.
  ImportGreetingConfig import_config = 2;
}

// Response message for [GreetingService.ImportGreeting][v1.GreetingService.ImportGreeting].
message ImportGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // success or fail.
  bool details = 3;
}
// Request message for [GreetingService.ExportGreeting][v1.GreetingService.ExportGreeting].
message ExportGreetingRequest {
  // The path of the Greeting's parent resource, if exists.
  // Format: `echos`
  string parent = 1;

  // Required. The desired output location.
  ExportGreetingConfig export_config = 2;
}

// Response message for [GreetingService.ExportGreeting][v1.GreetingService.ExportGreeting].
message ExportGreetingResponse {
  // status code.
  int32 code = 1;
  // error message.
  string message = 2;
  // All of the files that are exported in this export operation.
  repeated string details = 3;
}
