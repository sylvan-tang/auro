// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/v1/types.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Response with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResponseMultiError, or nil
// if none found.
func (m *Response) ValidateAll() error {
	return m.validate(true)
}

func (m *Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ResponseMultiError(errors)
	}
	return nil
}

// ResponseMultiError is an error wrapping multiple validation errors returned
// by Response.ValidateAll() if the designated constraints aren't met.
type ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMultiError) AllErrors() []error { return m }

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on CommonOption with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonOptionMultiError, or
// nil if none found.
func (m *CommonOption) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Size

	// no validation rules for Cursor

	// no validation rules for Query

	// no validation rules for OrderBy

	// no validation rules for GroupBy

	if len(errors) > 0 {
		return CommonOptionMultiError(errors)
	}
	return nil
}

// CommonOptionMultiError is an error wrapping multiple validation errors
// returned by CommonOption.ValidateAll() if the designated constraints aren't met.
type CommonOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonOptionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonOptionMultiError) AllErrors() []error { return m }

// CommonOptionValidationError is the validation error returned by
// CommonOption.Validate if the designated constraints aren't met.
type CommonOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonOptionValidationError) ErrorName() string { return "CommonOptionValidationError" }

// Error satisfies the builtin error interface
func (e CommonOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonOptionValidationError{}

// Validate checks the field values on CommonFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonFilterMultiError, or
// nil if none found.
func (m *CommonFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ColumnName

	// no validation rules for HighTime

	// no validation rules for LowTime

	if len(errors) > 0 {
		return CommonFilterMultiError(errors)
	}
	return nil
}

// CommonFilterMultiError is an error wrapping multiple validation errors
// returned by CommonFilter.ValidateAll() if the designated constraints aren't met.
type CommonFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonFilterMultiError) AllErrors() []error { return m }

// CommonFilterValidationError is the validation error returned by
// CommonFilter.Validate if the designated constraints aren't met.
type CommonFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonFilterValidationError) ErrorName() string { return "CommonFilterValidationError" }

// Error satisfies the builtin error interface
func (e CommonFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonFilterValidationError{}
