// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: echo/v1/greeting_service.proto

package echov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreetingRequestMultiError, or nil if none found.
func (m *CreateGreetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetGreeting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGreetingRequestValidationError{
					field:  "Greeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGreetingRequestValidationError{
					field:  "Greeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGreeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGreetingRequestValidationError{
				field:  "Greeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGreetingRequestMultiError(errors)
	}
	return nil
}

// CreateGreetingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGreetingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGreetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreetingRequestMultiError) AllErrors() []error { return m }

// CreateGreetingRequestValidationError is the validation error returned by
// CreateGreetingRequest.Validate if the designated constraints aren't met.
type CreateGreetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreetingRequestValidationError) ErrorName() string {
	return "CreateGreetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreetingRequestValidationError{}

// Validate checks the field values on CreateGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGreetingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGreetingResponseMultiError, or nil if none found.
func (m *CreateGreetingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGreetingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGreetingResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateGreetingResponseMultiError(errors)
	}
	return nil
}

// CreateGreetingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGreetingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGreetingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGreetingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGreetingResponseMultiError) AllErrors() []error { return m }

// CreateGreetingResponseValidationError is the validation error returned by
// CreateGreetingResponse.Validate if the designated constraints aren't met.
type CreateGreetingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGreetingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGreetingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGreetingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGreetingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGreetingResponseValidationError) ErrorName() string {
	return "CreateGreetingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGreetingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGreetingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGreetingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGreetingResponseValidationError{}

// Validate checks the field values on GetGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGreetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreetingRequestMultiError, or nil if none found.
func (m *GetGreetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetReadMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGreetingRequestValidationError{
					field:  "ReadMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGreetingRequestValidationError{
					field:  "ReadMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGreetingRequestValidationError{
				field:  "ReadMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGreetingRequestMultiError(errors)
	}
	return nil
}

// GetGreetingRequestMultiError is an error wrapping multiple validation errors
// returned by GetGreetingRequest.ValidateAll() if the designated constraints
// aren't met.
type GetGreetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreetingRequestMultiError) AllErrors() []error { return m }

// GetGreetingRequestValidationError is the validation error returned by
// GetGreetingRequest.Validate if the designated constraints aren't met.
type GetGreetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreetingRequestValidationError) ErrorName() string {
	return "GetGreetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreetingRequestValidationError{}

// Validate checks the field values on GetGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGreetingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGreetingResponseMultiError, or nil if none found.
func (m *GetGreetingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGreetingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGreetingResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetGreetingResponseMultiError(errors)
	}
	return nil
}

// GetGreetingResponseMultiError is an error wrapping multiple validation
// errors returned by GetGreetingResponse.ValidateAll() if the designated
// constraints aren't met.
type GetGreetingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGreetingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGreetingResponseMultiError) AllErrors() []error { return m }

// GetGreetingResponseValidationError is the validation error returned by
// GetGreetingResponse.Validate if the designated constraints aren't met.
type GetGreetingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGreetingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGreetingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGreetingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGreetingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGreetingResponseValidationError) ErrorName() string {
	return "GetGreetingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGreetingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGreetingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGreetingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGreetingResponseValidationError{}

// Validate checks the field values on UpdateGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreetingRequestMultiError, or nil if none found.
func (m *UpdateGreetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetGreeting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGreetingRequestValidationError{
					field:  "Greeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGreetingRequestValidationError{
					field:  "Greeting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGreeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGreetingRequestValidationError{
				field:  "Greeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGreetingRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGreetingRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGreetingRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGreetingRequestMultiError(errors)
	}
	return nil
}

// UpdateGreetingRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateGreetingRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateGreetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreetingRequestMultiError) AllErrors() []error { return m }

// UpdateGreetingRequestValidationError is the validation error returned by
// UpdateGreetingRequest.Validate if the designated constraints aren't met.
type UpdateGreetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreetingRequestValidationError) ErrorName() string {
	return "UpdateGreetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreetingRequestValidationError{}

// Validate checks the field values on UpdateGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateGreetingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateGreetingResponseMultiError, or nil if none found.
func (m *UpdateGreetingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateGreetingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateGreetingResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateGreetingResponseMultiError(errors)
	}
	return nil
}

// UpdateGreetingResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateGreetingResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateGreetingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateGreetingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateGreetingResponseMultiError) AllErrors() []error { return m }

// UpdateGreetingResponseValidationError is the validation error returned by
// UpdateGreetingResponse.Validate if the designated constraints aren't met.
type UpdateGreetingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGreetingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGreetingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGreetingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGreetingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGreetingResponseValidationError) ErrorName() string {
	return "UpdateGreetingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGreetingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGreetingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGreetingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGreetingResponseValidationError{}

// Validate checks the field values on ListGreetingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreetingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreetingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreetingsRequestMultiError, or nil if none found.
func (m *ListGreetingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreetingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetCommonOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "CommonOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "CommonOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreetingsRequestValidationError{
				field:  "CommonOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommonFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreetingsRequestValidationError{
				field:  "CommonFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReadMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "ReadMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "ReadMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreetingsRequestValidationError{
				field:  "ReadMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptionFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreetingsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreetingsRequestValidationError{
				field:  "OptionFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGreetingsRequestMultiError(errors)
	}
	return nil
}

// ListGreetingsRequestMultiError is an error wrapping multiple validation
// errors returned by ListGreetingsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGreetingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreetingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreetingsRequestMultiError) AllErrors() []error { return m }

// ListGreetingsRequestValidationError is the validation error returned by
// ListGreetingsRequest.Validate if the designated constraints aren't met.
type ListGreetingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreetingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreetingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreetingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreetingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreetingsRequestValidationError) ErrorName() string {
	return "ListGreetingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreetingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreetingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreetingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreetingsRequestValidationError{}

// Validate checks the field values on ListGreetingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreetingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreetingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGreetingsResponseMultiError, or nil if none found.
func (m *ListGreetingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreetingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreetingsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreetingsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreetingsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListGreetingsResponseMultiError(errors)
	}
	return nil
}

// ListGreetingsResponseMultiError is an error wrapping multiple validation
// errors returned by ListGreetingsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGreetingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreetingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreetingsResponseMultiError) AllErrors() []error { return m }

// ListGreetingsResponseValidationError is the validation error returned by
// ListGreetingsResponse.Validate if the designated constraints aren't met.
type ListGreetingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreetingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreetingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreetingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreetingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreetingsResponseValidationError) ErrorName() string {
	return "ListGreetingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreetingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreetingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreetingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreetingsResponseValidationError{}

// Validate checks the field values on DeleteGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreetingRequestMultiError, or nil if none found.
func (m *DeleteGreetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteGreetingRequestMultiError(errors)
	}
	return nil
}

// DeleteGreetingRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGreetingRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreetingRequestMultiError) AllErrors() []error { return m }

// DeleteGreetingRequestValidationError is the validation error returned by
// DeleteGreetingRequest.Validate if the designated constraints aren't met.
type DeleteGreetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreetingRequestValidationError) ErrorName() string {
	return "DeleteGreetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreetingRequestValidationError{}

// Validate checks the field values on DeleteGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreetingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreetingResponseMultiError, or nil if none found.
func (m *DeleteGreetingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreetingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGreetingResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGreetingResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteGreetingResponseMultiError(errors)
	}
	return nil
}

// DeleteGreetingResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGreetingResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreetingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreetingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreetingResponseMultiError) AllErrors() []error { return m }

// DeleteGreetingResponseValidationError is the validation error returned by
// DeleteGreetingResponse.Validate if the designated constraints aren't met.
type DeleteGreetingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreetingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreetingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreetingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreetingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreetingResponseValidationError) ErrorName() string {
	return "DeleteGreetingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreetingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreetingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreetingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreetingResponseValidationError{}

// Validate checks the field values on DeleteGreetingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreetingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreetingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreetingsRequestMultiError, or nil if none found.
func (m *DeleteGreetingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreetingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetCommonFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGreetingsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGreetingsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGreetingsRequestValidationError{
				field:  "CommonFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptionFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteGreetingsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteGreetingsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteGreetingsRequestValidationError{
				field:  "OptionFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteGreetingsRequestMultiError(errors)
	}
	return nil
}

// DeleteGreetingsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteGreetingsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreetingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreetingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreetingsRequestMultiError) AllErrors() []error { return m }

// DeleteGreetingsRequestValidationError is the validation error returned by
// DeleteGreetingsRequest.Validate if the designated constraints aren't met.
type DeleteGreetingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreetingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreetingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreetingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreetingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreetingsRequestValidationError) ErrorName() string {
	return "DeleteGreetingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreetingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreetingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreetingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreetingsRequestValidationError{}

// Validate checks the field values on DeleteGreetingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteGreetingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteGreetingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteGreetingsResponseMultiError, or nil if none found.
func (m *DeleteGreetingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteGreetingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteGreetingsResponseMultiError(errors)
	}
	return nil
}

// DeleteGreetingsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteGreetingsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteGreetingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteGreetingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteGreetingsResponseMultiError) AllErrors() []error { return m }

// DeleteGreetingsResponseValidationError is the validation error returned by
// DeleteGreetingsResponse.Validate if the designated constraints aren't met.
type DeleteGreetingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGreetingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGreetingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGreetingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGreetingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGreetingsResponseValidationError) ErrorName() string {
	return "DeleteGreetingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGreetingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGreetingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGreetingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGreetingsResponseValidationError{}

// Validate checks the field values on ImportGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGreetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGreetingRequestMultiError, or nil if none found.
func (m *ImportGreetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGreetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetImportConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ImportGreetingRequestValidationError{
					field:  "ImportConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ImportGreetingRequestValidationError{
					field:  "ImportConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImportConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportGreetingRequestValidationError{
				field:  "ImportConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ImportGreetingRequestMultiError(errors)
	}
	return nil
}

// ImportGreetingRequestMultiError is an error wrapping multiple validation
// errors returned by ImportGreetingRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportGreetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGreetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGreetingRequestMultiError) AllErrors() []error { return m }

// ImportGreetingRequestValidationError is the validation error returned by
// ImportGreetingRequest.Validate if the designated constraints aren't met.
type ImportGreetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGreetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGreetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGreetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGreetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGreetingRequestValidationError) ErrorName() string {
	return "ImportGreetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGreetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGreetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGreetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGreetingRequestValidationError{}

// Validate checks the field values on ImportGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportGreetingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportGreetingResponseMultiError, or nil if none found.
func (m *ImportGreetingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportGreetingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Details

	if len(errors) > 0 {
		return ImportGreetingResponseMultiError(errors)
	}
	return nil
}

// ImportGreetingResponseMultiError is an error wrapping multiple validation
// errors returned by ImportGreetingResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportGreetingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportGreetingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportGreetingResponseMultiError) AllErrors() []error { return m }

// ImportGreetingResponseValidationError is the validation error returned by
// ImportGreetingResponse.Validate if the designated constraints aren't met.
type ImportGreetingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportGreetingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportGreetingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportGreetingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportGreetingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportGreetingResponseValidationError) ErrorName() string {
	return "ImportGreetingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportGreetingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportGreetingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportGreetingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportGreetingResponseValidationError{}

// Validate checks the field values on ExportGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportGreetingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportGreetingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportGreetingRequestMultiError, or nil if none found.
func (m *ExportGreetingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportGreetingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetExportConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExportGreetingRequestValidationError{
					field:  "ExportConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExportGreetingRequestValidationError{
					field:  "ExportConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExportConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportGreetingRequestValidationError{
				field:  "ExportConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExportGreetingRequestMultiError(errors)
	}
	return nil
}

// ExportGreetingRequestMultiError is an error wrapping multiple validation
// errors returned by ExportGreetingRequest.ValidateAll() if the designated
// constraints aren't met.
type ExportGreetingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportGreetingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportGreetingRequestMultiError) AllErrors() []error { return m }

// ExportGreetingRequestValidationError is the validation error returned by
// ExportGreetingRequest.Validate if the designated constraints aren't met.
type ExportGreetingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportGreetingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportGreetingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportGreetingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportGreetingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportGreetingRequestValidationError) ErrorName() string {
	return "ExportGreetingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportGreetingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportGreetingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportGreetingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportGreetingRequestValidationError{}

// Validate checks the field values on ExportGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExportGreetingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExportGreetingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExportGreetingResponseMultiError, or nil if none found.
func (m *ExportGreetingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExportGreetingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return ExportGreetingResponseMultiError(errors)
	}
	return nil
}

// ExportGreetingResponseMultiError is an error wrapping multiple validation
// errors returned by ExportGreetingResponse.ValidateAll() if the designated
// constraints aren't met.
type ExportGreetingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExportGreetingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExportGreetingResponseMultiError) AllErrors() []error { return m }

// ExportGreetingResponseValidationError is the validation error returned by
// ExportGreetingResponse.Validate if the designated constraints aren't met.
type ExportGreetingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportGreetingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportGreetingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportGreetingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportGreetingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportGreetingResponseValidationError) ErrorName() string {
	return "ExportGreetingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportGreetingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportGreetingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportGreetingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportGreetingResponseValidationError{}

// Validate checks the field values on ListGreetingsResponse_Details with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGreetingsResponse_Details) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGreetingsResponse_Details with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListGreetingsResponse_DetailsMultiError, or nil if none found.
func (m *ListGreetingsResponse_Details) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGreetingsResponse_Details) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGreetingsResponse_DetailsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGreetingsResponse_DetailsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGreetingsResponse_DetailsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNextRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListGreetingsResponse_DetailsValidationError{
					field:  "NextRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListGreetingsResponse_DetailsValidationError{
					field:  "NextRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGreetingsResponse_DetailsValidationError{
				field:  "NextRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListGreetingsResponse_DetailsMultiError(errors)
	}
	return nil
}

// ListGreetingsResponse_DetailsMultiError is an error wrapping multiple
// validation errors returned by ListGreetingsResponse_Details.ValidateAll()
// if the designated constraints aren't met.
type ListGreetingsResponse_DetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGreetingsResponse_DetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGreetingsResponse_DetailsMultiError) AllErrors() []error { return m }

// ListGreetingsResponse_DetailsValidationError is the validation error
// returned by ListGreetingsResponse_Details.Validate if the designated
// constraints aren't met.
type ListGreetingsResponse_DetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGreetingsResponse_DetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGreetingsResponse_DetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGreetingsResponse_DetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGreetingsResponse_DetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGreetingsResponse_DetailsValidationError) ErrorName() string {
	return "ListGreetingsResponse_DetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ListGreetingsResponse_DetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGreetingsResponse_Details.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGreetingsResponse_DetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGreetingsResponse_DetailsValidationError{}
