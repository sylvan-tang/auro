// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: assoc/v1/assoc_service.proto

package assocv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssocRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssocRequestMultiError, or nil if none found.
func (m *CreateAssocRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssocRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetAssoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssocRequestValidationError{
					field:  "Assoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssocRequestValidationError{
					field:  "Assoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssocRequestValidationError{
				field:  "Assoc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAssocRequestMultiError(errors)
	}
	return nil
}

// CreateAssocRequestMultiError is an error wrapping multiple validation errors
// returned by CreateAssocRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateAssocRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssocRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssocRequestMultiError) AllErrors() []error { return m }

// CreateAssocRequestValidationError is the validation error returned by
// CreateAssocRequest.Validate if the designated constraints aren't met.
type CreateAssocRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssocRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssocRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssocRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssocRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssocRequestValidationError) ErrorName() string {
	return "CreateAssocRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssocRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssocRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssocRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssocRequestValidationError{}

// Validate checks the field values on CreateAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAssocResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAssocResponseMultiError, or nil if none found.
func (m *CreateAssocResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAssocResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAssocResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAssocResponseMultiError(errors)
	}
	return nil
}

// CreateAssocResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAssocResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAssocResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAssocResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAssocResponseMultiError) AllErrors() []error { return m }

// CreateAssocResponseValidationError is the validation error returned by
// CreateAssocResponse.Validate if the designated constraints aren't met.
type CreateAssocResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAssocResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAssocResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAssocResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAssocResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAssocResponseValidationError) ErrorName() string {
	return "CreateAssocResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAssocResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAssocResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAssocResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAssocResponseValidationError{}

// Validate checks the field values on UpdateAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssocRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssocRequestMultiError, or nil if none found.
func (m *UpdateAssocRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssocRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromId

	// no validation rules for ToId

	// no validation rules for AType

	if all {
		switch v := interface{}(m.GetAssoc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssocRequestValidationError{
					field:  "Assoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssocRequestValidationError{
					field:  "Assoc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssoc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssocRequestValidationError{
				field:  "Assoc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssocRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssocRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssocRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAssocRequestMultiError(errors)
	}
	return nil
}

// UpdateAssocRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateAssocRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateAssocRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssocRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssocRequestMultiError) AllErrors() []error { return m }

// UpdateAssocRequestValidationError is the validation error returned by
// UpdateAssocRequest.Validate if the designated constraints aren't met.
type UpdateAssocRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssocRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssocRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssocRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssocRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssocRequestValidationError) ErrorName() string {
	return "UpdateAssocRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssocRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssocRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssocRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssocRequestValidationError{}

// Validate checks the field values on UpdateAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssocResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssocResponseMultiError, or nil if none found.
func (m *UpdateAssocResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssocResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssocResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAssocResponseMultiError(errors)
	}
	return nil
}

// UpdateAssocResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAssocResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAssocResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssocResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssocResponseMultiError) AllErrors() []error { return m }

// UpdateAssocResponseValidationError is the validation error returned by
// UpdateAssocResponse.Validate if the designated constraints aren't met.
type UpdateAssocResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssocResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssocResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssocResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssocResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssocResponseValidationError) ErrorName() string {
	return "UpdateAssocResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssocResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssocResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssocResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssocResponseValidationError{}

// Validate checks the field values on ListAssocsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAssocsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssocsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssocsRequestMultiError, or nil if none found.
func (m *ListAssocsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssocsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetCommonOption()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "CommonOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "CommonOption",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonOption()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssocsRequestValidationError{
				field:  "CommonOption",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommonFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssocsRequestValidationError{
				field:  "CommonFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReadMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "ReadMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "ReadMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssocsRequestValidationError{
				field:  "ReadMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptionFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAssocsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssocsRequestValidationError{
				field:  "OptionFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAssocsRequestMultiError(errors)
	}
	return nil
}

// ListAssocsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAssocsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAssocsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssocsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssocsRequestMultiError) AllErrors() []error { return m }

// ListAssocsRequestValidationError is the validation error returned by
// ListAssocsRequest.Validate if the designated constraints aren't met.
type ListAssocsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssocsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssocsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssocsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssocsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssocsRequestValidationError) ErrorName() string {
	return "ListAssocsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssocsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssocsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssocsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssocsRequestValidationError{}

// Validate checks the field values on ListAssocsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssocsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssocsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssocsResponseMultiError, or nil if none found.
func (m *ListAssocsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssocsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAssocsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAssocsResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssocsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListAssocsResponseMultiError(errors)
	}
	return nil
}

// ListAssocsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAssocsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAssocsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssocsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssocsResponseMultiError) AllErrors() []error { return m }

// ListAssocsResponseValidationError is the validation error returned by
// ListAssocsResponse.Validate if the designated constraints aren't met.
type ListAssocsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssocsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssocsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssocsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssocsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssocsResponseValidationError) ErrorName() string {
	return "ListAssocsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssocsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssocsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssocsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssocsResponseValidationError{}

// Validate checks the field values on DeleteAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssocRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssocRequestMultiError, or nil if none found.
func (m *DeleteAssocRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssocRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromId

	// no validation rules for ToId

	// no validation rules for AType

	if len(errors) > 0 {
		return DeleteAssocRequestMultiError(errors)
	}
	return nil
}

// DeleteAssocRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAssocRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAssocRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssocRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssocRequestMultiError) AllErrors() []error { return m }

// DeleteAssocRequestValidationError is the validation error returned by
// DeleteAssocRequest.Validate if the designated constraints aren't met.
type DeleteAssocRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssocRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssocRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssocRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssocRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssocRequestValidationError) ErrorName() string {
	return "DeleteAssocRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssocRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssocRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssocRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssocRequestValidationError{}

// Validate checks the field values on DeleteAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssocResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssocResponseMultiError, or nil if none found.
func (m *DeleteAssocResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssocResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAssocResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAssocResponseMultiError(errors)
	}
	return nil
}

// DeleteAssocResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAssocResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAssocResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssocResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssocResponseMultiError) AllErrors() []error { return m }

// DeleteAssocResponseValidationError is the validation error returned by
// DeleteAssocResponse.Validate if the designated constraints aren't met.
type DeleteAssocResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssocResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssocResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssocResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssocResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssocResponseValidationError) ErrorName() string {
	return "DeleteAssocResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssocResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssocResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssocResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssocResponseValidationError{}

// Validate checks the field values on DeleteAssocsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssocsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssocsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssocsRequestMultiError, or nil if none found.
func (m *DeleteAssocsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssocsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Parent

	if all {
		switch v := interface{}(m.GetCommonFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAssocsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAssocsRequestValidationError{
					field:  "CommonFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAssocsRequestValidationError{
				field:  "CommonFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOptionFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAssocsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAssocsRequestValidationError{
					field:  "OptionFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptionFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAssocsRequestValidationError{
				field:  "OptionFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAssocsRequestMultiError(errors)
	}
	return nil
}

// DeleteAssocsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAssocsRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAssocsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssocsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssocsRequestMultiError) AllErrors() []error { return m }

// DeleteAssocsRequestValidationError is the validation error returned by
// DeleteAssocsRequest.Validate if the designated constraints aren't met.
type DeleteAssocsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssocsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssocsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssocsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssocsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssocsRequestValidationError) ErrorName() string {
	return "DeleteAssocsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssocsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssocsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssocsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssocsRequestValidationError{}

// Validate checks the field values on DeleteAssocsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssocsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssocsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssocsResponseMultiError, or nil if none found.
func (m *DeleteAssocsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssocsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteAssocsResponseMultiError(errors)
	}
	return nil
}

// DeleteAssocsResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAssocsResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAssocsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssocsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssocsResponseMultiError) AllErrors() []error { return m }

// DeleteAssocsResponseValidationError is the validation error returned by
// DeleteAssocsResponse.Validate if the designated constraints aren't met.
type DeleteAssocsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssocsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssocsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssocsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssocsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssocsResponseValidationError) ErrorName() string {
	return "DeleteAssocsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssocsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssocsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssocsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssocsResponseValidationError{}

// Validate checks the field values on CountAssocsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountAssocsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountAssocsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountAssocsRequestMultiError, or nil if none found.
func (m *CountAssocsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CountAssocsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromId

	// no validation rules for AType

	if len(errors) > 0 {
		return CountAssocsRequestMultiError(errors)
	}
	return nil
}

// CountAssocsRequestMultiError is an error wrapping multiple validation errors
// returned by CountAssocsRequest.ValidateAll() if the designated constraints
// aren't met.
type CountAssocsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountAssocsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountAssocsRequestMultiError) AllErrors() []error { return m }

// CountAssocsRequestValidationError is the validation error returned by
// CountAssocsRequest.Validate if the designated constraints aren't met.
type CountAssocsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountAssocsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountAssocsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountAssocsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountAssocsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountAssocsRequestValidationError) ErrorName() string {
	return "CountAssocsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CountAssocsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountAssocsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountAssocsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountAssocsRequestValidationError{}

// Validate checks the field values on CountAssocsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CountAssocsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CountAssocsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CountAssocsResponseMultiError, or nil if none found.
func (m *CountAssocsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CountAssocsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for Details

	if len(errors) > 0 {
		return CountAssocsResponseMultiError(errors)
	}
	return nil
}

// CountAssocsResponseMultiError is an error wrapping multiple validation
// errors returned by CountAssocsResponse.ValidateAll() if the designated
// constraints aren't met.
type CountAssocsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CountAssocsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CountAssocsResponseMultiError) AllErrors() []error { return m }

// CountAssocsResponseValidationError is the validation error returned by
// CountAssocsResponse.Validate if the designated constraints aren't met.
type CountAssocsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CountAssocsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CountAssocsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CountAssocsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CountAssocsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CountAssocsResponseValidationError) ErrorName() string {
	return "CountAssocsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CountAssocsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCountAssocsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CountAssocsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CountAssocsResponseValidationError{}

// Validate checks the field values on GetAssocRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAssocRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssocRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssocRequestMultiError, or nil if none found.
func (m *GetAssocRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssocRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromId

	// no validation rules for AType

	// no validation rules for ToId

	if len(errors) > 0 {
		return GetAssocRequestMultiError(errors)
	}
	return nil
}

// GetAssocRequestMultiError is an error wrapping multiple validation errors
// returned by GetAssocRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAssocRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssocRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssocRequestMultiError) AllErrors() []error { return m }

// GetAssocRequestValidationError is the validation error returned by
// GetAssocRequest.Validate if the designated constraints aren't met.
type GetAssocRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssocRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssocRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssocRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssocRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssocRequestValidationError) ErrorName() string { return "GetAssocRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAssocRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssocRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssocRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssocRequestValidationError{}

// Validate checks the field values on GetAssocResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAssocResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssocResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssocResponseMultiError, or nil if none found.
func (m *GetAssocResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssocResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAssocResponseValidationError{
					field:  "Details",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAssocResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAssocResponseMultiError(errors)
	}
	return nil
}

// GetAssocResponseMultiError is an error wrapping multiple validation errors
// returned by GetAssocResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAssocResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssocResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssocResponseMultiError) AllErrors() []error { return m }

// GetAssocResponseValidationError is the validation error returned by
// GetAssocResponse.Validate if the designated constraints aren't met.
type GetAssocResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssocResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssocResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssocResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssocResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssocResponseValidationError) ErrorName() string { return "GetAssocResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetAssocResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssocResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssocResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssocResponseValidationError{}

// Validate checks the field values on Assoc with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Assoc) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Assoc with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AssocMultiError, or nil if none found.
func (m *Assoc) ValidateAll() error {
	return m.validate(true)
}

func (m *Assoc) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreateAt

	// no validation rules for UpdateAt

	// no validation rules for FromId

	// no validation rules for ToId

	// no validation rules for AType

	// no validation rules for Meta

	if len(errors) > 0 {
		return AssocMultiError(errors)
	}
	return nil
}

// AssocMultiError is an error wrapping multiple validation errors returned by
// Assoc.ValidateAll() if the designated constraints aren't met.
type AssocMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssocMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssocMultiError) AllErrors() []error { return m }

// AssocValidationError is the validation error returned by Assoc.Validate if
// the designated constraints aren't met.
type AssocValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssocValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssocValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssocValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssocValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssocValidationError) ErrorName() string { return "AssocValidationError" }

// Error satisfies the builtin error interface
func (e AssocValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssoc.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssocValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssocValidationError{}

// Validate checks the field values on AssocOptionFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssocOptionFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssocOptionFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssocOptionFilterMultiError, or nil if none found.
func (m *AssocOptionFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *AssocOptionFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FromId

	// no validation rules for AType

	if len(errors) > 0 {
		return AssocOptionFilterMultiError(errors)
	}
	return nil
}

// AssocOptionFilterMultiError is an error wrapping multiple validation errors
// returned by AssocOptionFilter.ValidateAll() if the designated constraints
// aren't met.
type AssocOptionFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssocOptionFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssocOptionFilterMultiError) AllErrors() []error { return m }

// AssocOptionFilterValidationError is the validation error returned by
// AssocOptionFilter.Validate if the designated constraints aren't met.
type AssocOptionFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssocOptionFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssocOptionFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssocOptionFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssocOptionFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssocOptionFilterValidationError) ErrorName() string {
	return "AssocOptionFilterValidationError"
}

// Error satisfies the builtin error interface
func (e AssocOptionFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssocOptionFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssocOptionFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssocOptionFilterValidationError{}

// Validate checks the field values on ListAssocsResponse_Details with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssocsResponse_Details) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssocsResponse_Details with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssocsResponse_DetailsMultiError, or nil if none found.
func (m *ListAssocsResponse_Details) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssocsResponse_Details) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssocsResponse_DetailsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssocsResponse_DetailsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssocsResponse_DetailsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNextRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAssocsResponse_DetailsValidationError{
					field:  "NextRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAssocsResponse_DetailsValidationError{
					field:  "NextRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAssocsResponse_DetailsValidationError{
				field:  "NextRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalCount

	if len(errors) > 0 {
		return ListAssocsResponse_DetailsMultiError(errors)
	}
	return nil
}

// ListAssocsResponse_DetailsMultiError is an error wrapping multiple
// validation errors returned by ListAssocsResponse_Details.ValidateAll() if
// the designated constraints aren't met.
type ListAssocsResponse_DetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssocsResponse_DetailsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssocsResponse_DetailsMultiError) AllErrors() []error { return m }

// ListAssocsResponse_DetailsValidationError is the validation error returned
// by ListAssocsResponse_Details.Validate if the designated constraints aren't met.
type ListAssocsResponse_DetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssocsResponse_DetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssocsResponse_DetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssocsResponse_DetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssocsResponse_DetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssocsResponse_DetailsValidationError) ErrorName() string {
	return "ListAssocsResponse_DetailsValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssocsResponse_DetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssocsResponse_Details.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssocsResponse_DetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssocsResponse_DetailsValidationError{}
