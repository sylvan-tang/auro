"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import ...assoc.v1.assoc_service_pb2
import grpc

class AssocServiceStub:
    """The service that handles the CRUD of Assoc."""
    def __init__(self, channel: grpc.Channel) -> None: ...
    CreateAssoc: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.CreateAssocRequest,
        assoc.v1.assoc_service_pb2.CreateAssocResponse]
    """Creates a Assoc."""

    UpdateAssoc: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.UpdateAssocRequest,
        assoc.v1.assoc_service_pb2.UpdateAssocResponse]
    """Updates a Assoc."""

    ListAssocs: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.ListAssocsRequest,
        assoc.v1.assoc_service_pb2.ListAssocsResponse]
    """Lists Assocs in a Location."""

    DeleteAssoc: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.DeleteAssocRequest,
        assoc.v1.assoc_service_pb2.DeleteAssocResponse]
    """Deletes a Assoc."""

    DeleteAssocs: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.DeleteAssocsRequest,
        assoc.v1.assoc_service_pb2.DeleteAssocsResponse]
    """Batch delete Assoc by filter."""

    CountAssocs: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.CountAssocsRequest,
        assoc.v1.assoc_service_pb2.CountAssocsResponse]

    GetAssoc: grpc.UnaryUnaryMultiCallable[
        assoc.v1.assoc_service_pb2.GetAssocRequest,
        assoc.v1.assoc_service_pb2.GetAssocResponse]


class AssocServiceServicer(metaclass=abc.ABCMeta):
    """The service that handles the CRUD of Assoc."""
    @abc.abstractmethod
    def CreateAssoc(self,
        request: assoc.v1.assoc_service_pb2.CreateAssocRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.CreateAssocResponse:
        """Creates a Assoc."""
        pass

    @abc.abstractmethod
    def UpdateAssoc(self,
        request: assoc.v1.assoc_service_pb2.UpdateAssocRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.UpdateAssocResponse:
        """Updates a Assoc."""
        pass

    @abc.abstractmethod
    def ListAssocs(self,
        request: assoc.v1.assoc_service_pb2.ListAssocsRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.ListAssocsResponse:
        """Lists Assocs in a Location."""
        pass

    @abc.abstractmethod
    def DeleteAssoc(self,
        request: assoc.v1.assoc_service_pb2.DeleteAssocRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.DeleteAssocResponse:
        """Deletes a Assoc."""
        pass

    @abc.abstractmethod
    def DeleteAssocs(self,
        request: assoc.v1.assoc_service_pb2.DeleteAssocsRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.DeleteAssocsResponse:
        """Batch delete Assoc by filter."""
        pass

    @abc.abstractmethod
    def CountAssocs(self,
        request: assoc.v1.assoc_service_pb2.CountAssocsRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.CountAssocsResponse: ...

    @abc.abstractmethod
    def GetAssoc(self,
        request: assoc.v1.assoc_service_pb2.GetAssocRequest,
        context: grpc.ServicerContext,
    ) -> assoc.v1.assoc_service_pb2.GetAssocResponse: ...


def add_AssocServiceServicer_to_server(servicer: AssocServiceServicer, server: grpc.Server) -> None: ...
